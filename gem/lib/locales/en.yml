---
en:
  mulang:
    expectation:
      must_not: must not
      must: must
      solution: solution
      with_char: ' with character <code>%{value}</code>'
      with_false: ' with value <code>%{keyword_False}</code>'
      with_literal: ' with a literal value'
      with_logic: ' with a boolean expression'
      with_math:  ' with a math expression'
      with_nil: ' with <code>%{keyword_Nil}</code>'
      with_nonliteral: ' with a non-literal expresson'
      with_number: ' with number <code>%{value}</code>'
      with_string: ' with string <code>%{value}</code>'
      with_symbol: ' with symbol <code>%{value}</code>'
      with_true: ' with value <code>%{keyword_True}</code>'
    inspection:
      Assigns_except: '%{binding} %{must} assign something distinct from %{target}%{matching}'
      Assigns_like: '%{binding} %{must} assign something similar to %{target}%{matching}'
      Assigns_named: '%{binding} %{must} assign %{target}%{matching}'
      Assigns: '%{binding} %{must} perform assignments%{matching}'
      Calls_except: '%{binding} %{must} delegate to something distinct from %{target}%{matching}'
      Calls_like: '%{binding} %{must} delegate to something similar to %{target}%{matching}'
      Calls_named: '%{binding} %{must} use %{target}%{matching}'
      Calls: '%{binding} %{must} delegate%{matching}'
      Declares_except: '%{binding} %{must} contain declarations distinct from %{target}'
      Declares_like: '%{binding} %{must} declare an identifier similar to %{target}'
      Declares_named: '%{binding} %{must} declare %{target}'
      Declares: '%{binding} %{must} contain declarations'
      DeclaresAttribute_except: '%{binding} %{must} declare attributes distinct from %{target}%{matching}'
      DeclaresAttribute_like: '%{binding} %{must} declare an attribute similar to %{target}%{matching}'
      DeclaresAttribute_named: '%{binding} %{must} declare an attribute %{target}%{matching}'
      DeclaresAttribute: '%{binding} %{must} declare attributes%{matching}'
      DeclaresClass_except: '%{binding} %{must} declare classes distinct from %{target}'
      DeclaresClass_like: '%{binding} %{must} declare a class similar to %{target}'
      DeclaresClass_named: '%{binding} %{must} declare a class %{target}'
      DeclaresClass: '%{binding} %{must} declare classes'
      DeclaresComputation_except: '%{binding} %{must} declare computations distinct from %{target}'
      DeclaresComputation_like: '%{binding} %{must} declare a computation similar to %{target}'
      DeclaresComputation_named: '%{binding} %{must} declare a computation %{target}'
      DeclaresComputation: '%{binding} %{must} declare computations'
      DeclaresComputationWithArity0_named: '%{target} %{must} have zero parameters'
      DeclaresComputationWithArity1_named: '%{target} %{must} have one parameter'
      DeclaresComputationWithArity2_named: '%{target} %{must} have 2 parameters'
      DeclaresComputationWithArity3_named: '%{target} %{must} have 3 parameters'
      DeclaresComputationWithArity4_named: '%{target} %{must} have 4 parameters'
      DeclaresComputationWithArity5_named: '%{target} %{must} have 5 parameters'
      DeclaresEntryPoint: '%{binding} %{must} declare a <code>%{keyword_EntryPoint}</code>%{matching}'
      DeclaresEnumeration_except: '%{binding} %{must} declare enumerations distinct from %{target}'
      DeclaresEnumeration_like: '%{binding} %{must} declare an enumeration like %{target}'
      DeclaresEnumeration_named: '%{binding} %{must} declare an enumeration %{target}'
      DeclaresEnumeration: '%{binding} %{must} declare enumerations'
      DeclaresFact_except: '%{binding} %{must} declare facts distinct from %{target}'
      DeclaresFact_like: '%{binding} %{must} declare a fact similar to %{target}'
      DeclaresFact_named: '%{binding} %{must} declare a fact %{target}'
      DeclaresFact: '%{binding} %{must} declare facts'
      DeclaresFunction_except: '%{binding} %{must} declare functions distinct from %{target}%{matching}'
      DeclaresFunction_like: '%{binding} %{must} declare a function similar to %{target}%{matching}'
      DeclaresFunction_named: '%{binding} %{must} declare a function %{target}%{matching}'
      DeclaresFunction: '%{binding} %{must} debe declare functions%{matching}'
      DeclaresInterface_except: '%{binding} %{must} declare interfaces distinct from %{target}%{matching}'
      DeclaresInterface_like: '%{binding} %{must} declare an interface like %{target}%{matching}'
      DeclaresInterface_named: '%{binding} %{must} declare an interface %{target}%{matching}'
      DeclaresInterface: '%{binding} %{must} declare interfaces%{matching}%{matching}'
      DeclaresMethod_except: '%{binding} %{must} declare methods distinct from %{target}%{matching}'
      DeclaresMethod_like: '%{binding} %{must} declare a method similar to %{target}%{matching}'
      DeclaresMethod_named: '%{binding} %{must} declare a method %{target}%{matching}'
      DeclaresMethod: '%{binding} %{must} declare methods%{matching}'
      DeclaresObject_except: '%{binding} %{must} declare objects distinct from %{target}%{matching}'
      DeclaresObject_like: '%{binding} %{must} declare an object similar to %{target}%{matching}'
      DeclaresObject_named: '%{binding} %{must} declare an object %{target}%{matching}'
      DeclaresObject: '%{binding} %{must} declare objects%{matching}'
      DeclaresPredicate_except: '%{binding} %{must} declare a predicate distinct from %{target}%{matching}'
      DeclaresPredicate_like: '%{binding} %{must} declare a predicate similar to %{target}%{matching}'
      DeclaresPredicate_named: '%{binding} %{must} declare predicates %{target}%{matching}'
      DeclaresPredicate: '%{binding} %{must} declare predicates%{matching}'
      DeclaresProcedure_except: '%{binding} %{must} declare procedures distinct from %{target}%{matching}'
      DeclaresProcedure_like: '%{binding} %{must} declare a procedure similar to %{target}%{matching}'
      DeclaresProcedure_named: '%{binding} %{must} declare a procedure %{target}%{matching}'
      DeclaresProcedure: '%{binding} %{must} declare procedures%{matching}'
      DeclaresRecursively_named: '%{target} %{must} declared recursively'
      DeclaresRule_except: '%{binding} %{must} declare rules distinct from %{target}'
      DeclaresRule_like: '%{binding} %{must} declare a rule similar to %{target}'
      DeclaresRule_named: '%{binding} %{must} declare a rule %{target}'
      DeclaresRule: '%{binding} %{must} debe declare rules'
      DeclaresTypeAlias_except: '%{binding} %{must} declare type aliases distinct from %{target}'
      DeclaresTypeAlias_like: '%{binding} %{must} declare a type alias similar to %{target}'
      DeclaresTypeAlias_named: '%{binding} %{must} declare a type alias %{target}'
      DeclaresTypeAlias: '%{binding} %{must} declare type aliases'
      DeclaresTypeSignature_except: '%{binding} %{must} declare a type signature distinct from %{target}'
      DeclaresTypeSignature_like: '%{binding} %{must} declare a type signature for something like %{target}'
      DeclaresTypeSignature_named: '%{binding} %{must} declare a type signature %{target}'
      DeclaresTypeSignature: '%{binding} %{must} decarar type signatures'
      DeclaresVariable_except: '%{binding} %{must} declare variables distinct from %{target}%{matching}'
      DeclaresVariable_like: '%{binding} %{must} declare a variable similar to %{target}%{matching}'
      DeclaresVariable_named: '%{binding} %{must} declare a variable %{target}%{matching}'
      DeclaresVariable: '%{binding} %{must} debe declare variables%{matching}'
      Delegates: '%{binding} %{must} delegate'
      DiscardsExceptions: '%{binding} is ignoring exceptions silently'
      DoesConsolePrint: '%{binding} is printing to the console'
      DoesNilTest: '%{binding} does <code>%{keyword_Nil}</code> tests'
      DoesNullTest: '%{binding} does <code>%{keyword_Nil}</code> tests'
      DoesTypeTest: '%{binding} string type tests'
      HasAssignmentCondition: '%{binding} evaluates the result of an assignment where a boolean expression is expected. Perhaps you meant to use the <code>%{operator_Equal}</code> operator?'
      HasAssignmentReturn: '%{binding} returns the result of an assignment. Perhaps you meant to use the <code>%{operator_Equal}</code> operator?'
      HasCodeDuplication: '%{binding} has code duplication'
      HasDeclarationTypos_named: 'Solution must declare %{target}, but declares %{binding}. Perhaps you meant %{target}?'
      HasEmptyIfBranches: '%{binding} has empty <code>%{keyword_If}</code> branches'
      HasEmptyRepeat: '%{binding} has empty <code>%{keyword_Repeat}</code>'
      HasEqualIfBranches: '%{binding} has unnecessary <code>%{keyword_If}</code>s whose branches are equal'
      HasLongParameterList: '%{binding} has too many parameters. You may be missing an abstraction.'
      HasMisspelledBindings: '%{binding} is misspelled'
      HasMisspelledIdentifiers: '%{binding} is misspelled'
      HasRedundantBooleanComparison: '%{binding} makes unnecesary boolean comparisons'
      HasRedundantAnd: '%{binding} has an expression in the form `%{keyword_True} %{operator_And} condition`, which may be replaced by just `condition`'
      HasRedundantOr: '%{binding} has an expression in the form `%{keyword_False} %{operator_Or} condition`, which may be replaced by just `condition`'
      HasRedundantGuards: '%{binding} has unnecessary guards'
      HasRedundantIf: '%{binding} has unnecessary <code>%{keyword_If}</code>s that can be replaced by a boolean expression'
      HasRedundantLambda: '%{binding} has unnecessary lambdas'
      HasRedundantLocalVariableReturn: '%{binding} has unnecesary local variables; please try returning the expression directly'
      HasRedundantParameter: '%{binding} has unnecessary parameters, that can be removed using point-free'
      HasRedundantReduction: '%{binding} uses <code>%{keyword_Is}</code>, but it does not artihmetic'
      HasRedundantRepeat: '%{binding} has an unnecesary <code>%{keyword_Repeat}</code>'
      HasTooManyMethods: '%{binding} has too many methods'
      HasTooShortBindings: '%{binding} is a too short identifier'
      HasTooShortIdentifiers: '%{binding} is a too short identifier'
      HasUnreachableCode: '%{binding} has unreachable code'
      HasUsageTypos_named:  'Solution must use %{target}, but it uses %{binding}. Perhaps you meant %{target}?'
      HasWrongCaseBindings: '%{binding} does not honor case conventions'
      HasWrongCaseIdentifiers: '%{binding} does not honor case conventions'
      Implements_except: '%{binding} %{must} implement interfaces distinct from %{target}'
      Implements_like: '%{binding} %{must} implement interfaces like %{target}'
      Implements_named: '%{binding} %{must} implement %{target}'
      Implements: '%{binding} %{must} implement intefaces'
      Includes_except: '%{binding} %{must} include mixins distinct from %{target}'
      Includes_like: '%{binding} %{must} include a mixin similar to %{target}'
      Includes_named: '%{binding} %{must} include the %{target} mixin'
      Includes: '%{binding} %{must} include mixins'
      Instantiates_except: '%{binding} %{must} instantiate classes distinct from %{target}'
      Instantiates_like: '%{binding} %{must} instantiate classes like %{target}'
      Instantiates_named: '%{binding} %{must} instantiate %{target}'
      Instantiates: '%{binding} %{must} instantiate objects'
      IsLongCode: '%{binding} is too long'
      JavaScript#UsesVarInsteadOfLet: '%{binding} should use <code>let</code> instead of <code>var</code>'
      OverridesEqualOrHashButNotBoth: '%{binding} overrides <code>equals</code> or <code>hash</code> methods, but not both'
      Raises_except: '%{binding} %{must} throw exceptions distinct from %{target}'
      Raises_like: '%{binding} %{must} throw exceptions like %{target}'
      Raises_named: '%{binding} %{must} throw %{target}'
      Raises: '%{binding} %{must} throw exceptions'
      Returns: '%{binding} %{must} return%{matching}'
      ReturnsNil: '%{binding} retuns <code>%{keyword_Nil}</code>, which is a bad practice'
      ReturnsNull: '%{binding} retuns <code>%{keyword_Nil}</code>, which is a bad practice'
      ShouldInvertIfCondition: '%{binding} should invert <code>%{keyword_If}</code> condition and swap branches'
      ShouldUseStrictComparators: '%{binding} should use strict operators <code>%{operator_Equal}</code> and <code>%{operator_NotEqual}</code> instead of <code>%{operator_Similar}</code> and <code>%{operator_NotSimilar}</code>'
      SubordinatesDeclarationsTo: 'All declarations in %{binding} %{must} be used from %{target}'
      SubordinatesDeclarationsToEntryPoint: 'All declarations in %{binding} %{must} be used from <code>%{keyword_EntryPoint}</code> '
      TypesAs_named: '%{binding} %{must} type as %{target}'
      TypesAs: '%{binding} %{must} type'
      TypesParameterAs_except: '%{binding} %{must} type parameters with a type distinct from %{target}'
      TypesParameterAs_like: '%{binding} %{must} type parameters with a type similar to %{target}'
      TypesParameterAs_named: '%{binding} %{must} type parameters with type %{target}'
      TypesParameterAs: '%{binding} %{must} type parameters'
      TypesReturnAs_named: '%{binding} %{must} type its return value as %{target}'
      TypesReturnAs: '%{binding} %{must} type its return value'
      Uses_except: '%{binding} %{must} delegate to something distinct from %{target}'
      Uses_like: '%{binding} %{must} delegate to something similar to %{target}'
      Uses_named: '%{binding} %{must} use %{target}'
      Uses: '%{binding} %{must} delegate'
      UsesAnonymousVariable: '%{binding} %{must} use an annonymous variable'
      UsesComposition: '%{binding} %{must} use composition'
      UsesComprehension: '%{binding} %{must} use comprehensions'
      UsesConditional: '%{binding} %{must} use conditionals'
      UsesCut: '%{binding} uses <code>!</li> operator, which is a bad practice'
      UsesDynamicMethodOverload: '%{binding} %{must} use overload'
      UsesDynamicPolymorphism: '%{binding} %{must} use polymorphism'
      UsesFail: '%{binding} uses <code>%{keyword_Fail}</li>, which is a bad practice'
      UsesFindall: '%{binding} %{must} use <code>%{keyword_Findall}</code>'
      UsesForall: '%{binding} %{must} use <code>%{keyword_Forall}</code>'
      UsesForeach: '%{binding} %{must} use <code>%{keyword_ForEach}</code>%{matching}'
      UsesForLoop: '%{binding} %{must} use <code>%{keyword_For}</code>%{matching}'
      UsesGuards: '%{binding} %{must} use guards%{matching}'
      UsesIf: '%{binding} %{must} use <code>%{keyword_If}</code>%{matching}'
      UsesLambda: '%{binding} %{must} use lambda expressions%{matching}'
      UsesLogic: '%{binding} %{must} usar boolean operators'
      UsesLoop: '%{binding} %{must} use a loop%{matching}'
      UsesMath: '%{binding} %{must} usar math expressions'
      UsesMixin: '%{binding} %{must} use mixins'
      UsesNamedSelfReference: '%{binding} should use <code>%{keyword_Self}</code> instead of a global reference'
      UsesNot: '%{binding} %{must} use not'
      UsesObjectComposition: '%{binding} %{must} use composition'
      UsesPatternMatching: '%{binding} %{must} use pattern matching'
      UsesRepeat: '%{binding} %{must} use <code>%{keyword_Repeat}</code>%{matching}'
      UsesRepeatOf: '%{binding} %{must} use <code>%{keyword_Repeat}</code>'
      UsesStaticMethodOverload: '%{binding} %{must} use overload'
      UsesStaticPolymorphism: '%{binding} %{must} use polymorphism'
      UsesSwitch: '%{binding} %{must} use a <code>%{keyword_Switch}</code>'
      UsesTemplateMethod: '%{binding} %{must} use a template method'
      UsesUnificationOperator: '%{binding} uses the unification operator (=)'
      UsesWhile: '%{binding} %{must} use <code>%{keyword_While}</code>%{matching}'
